import numpy as np

class NeuralNetwork:
    def __init__(self, input_size, hidden_size, output_size):
        self.input_size = input_size
        self.hidden_size = hidden_size
        self.output_size = output_size
        
        # Initialize weights and biases
        self.W1 = np.random.randn(self.input_size, self.hidden_size)
        self.b1 = np.zeros((1, self.hidden_size))
        self.W2 = np.random.randn(self.hidden_size, self.output_size)
        self.b2 = np.zeros((1, self.output_size))
        
    def sigmoid(self, x):
        return 1 / (1 + np.exp(-x))
    
    def forward(self, X):
        # Forward pass through the network
        self.z1 = np.dot(X, self.W1) + self.b1
        self.a1 = self.sigmoid(self.z1)
        self.z2 = np.dot(self.a1, self.W2) + self.b2
        self.a2 = self.sigmoid(self.z2)
        return self.a2
    
    def compute_loss(self, X, y):
        # Compute binary cross-entropy loss
        m = y.shape[0]
        loss = -1/m * np.sum(y * np.log(self.a2) + (1 - y) * np.log(1 - self.a2))
        return loss
    
    def backward(self, X, y, learning_rate):
        # Backward pass through the network
        m = y.shape[0]
        dz2 = self.a2 - y
        dW2 = 1/m * np.dot(self.a1.T, dz2)
        db2 = 1/m * np.sum(dz2, axis=0, keepdims=True)
        dz1 = np.dot(dz2, self.W2.T) * self.a1 * (1 - self.a1)
        dW1 = 1/m * np.dot(X.T, dz1)
        db1 = 1/m * np.sum(dz1, axis=0, keepdims=True)
        
        # Update weights and biases
        self.W1 -= learning_rate * dW1
        self.b1 -= learning_rate * db1
        self.W2 -= learning_rate * dW2
        self.b2 -= learning_rate * db2
        
    def train(self, X, y, epochs, learning_rate):
        for epoch in range(epochs):
            # Forward pass
            output = self.forward(X)
            
            # Compute loss
            loss = self.compute_loss(X, y)
            
            # Backpropagation
            self.backward(X, y, learning_rate)
            
            # Print progress
            if epoch % 100 == 0:
                print(f'Epoch {epoch}, Loss: {loss}')
    
    def predict(self, X):
        # Make predictions
        output = self.forward(X)
        predictions = (output > 0.5).astype(int)
        return predictions

# Example usage
if __name__ == "__main__":
    # Example dataset (XOR)
    X = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
    y = np.array([[0], [1], [1], [0]])
    
    # Create and train neural network
    input_size = 2
    hidden_size = 4
    output_size = 1
    nn = NeuralNetwork(input_size, hidden_size, output_size)
    nn.train(X, y, epochs=1000, learning_rate=0.1)
    
    # Make predictions
    predictions = nn.predict(X)
    print("Predictions:", predictions)
